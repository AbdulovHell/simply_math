namespace Project {
	namespace Filters {
		class KalmanFilter {	//Простой, для одной переменной
			double X0, P0, F, H, R, Q, Covariance, B;
			/*	https://habrahabr.ru/post/140274/
			///
			F - переменная описывающая динамику системы, в случае с топливом — это может быть коэффициент определяющий расход топлива
			на холостых оборотах за время дискретизации (время между шагами алгоритма). Однако помимо расхода топлива, существуют ещё и заправки…
			поэтому для простоты примем эту переменную равную 1 (то есть мы указываем, что предсказываемое значение будет равно предыдущему состоянию).
			///
			B - переменная определяющая применение управляющего воздействия. Если бы у нас были дополнительная информация об оборотах двигателя или
			степени нажатия на педаль акселератора, то этот параметр бы определял как изменится расход топлива за время дискретизации.
			Так как управляющих воздействий в нашей модели нет (нет информации о них), то принимаем B = 0.
			///
			H - матрица определяющая отношение между измерениями и состоянием системы, пока без объяснений примем эту переменную также равную 1.
			///
			Q - определение шума процесса является более сложной задачей, так как требуется определить дисперсию процесса, что не всегда возможно.
			В любом случае, можно подобрать этот параметр для обеспечения требуемого уровня фильтрации.
			///
			R - ошибка измерения может быть определена испытанием измерительных приборов и определением погрешности их измерения.
			///
			*/
			double State;
		public:
			//прим. 1 1 200 15
			KalmanFilter(double f, double h, double r, double q);
			//прим. KalmanFilter^ lat->SetState(_lat, 0.1);
			void SetState(double state, double covariance);
			double GetState();
			void Correct(double data);
		};
	}
}